import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import mysql from 'mysql2/promise';
import { availableParallelism } from 'os';
import cluster from 'cluster';
import { createAdapter, setupPrimary } from '@socket.io/cluster-adapter';
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

if (cluster.isPrimary) {
  const numCPUs = availableParallelism();
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork({
      PORT: 3000 + i
    });
  }

  setupPrimary();
} else {
  const pool = mysql.createPool({
    host: 'localhost',
    user: 'phpmyadmin',
    password: 'aluno',
    database: 'messages',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
  });

  const app = express();
  const server = createServer(app);
  const io = new Server(server, {
    connectionStateRecovery: {},
    adapter: createAdapter()
  });

  app.get('/', (req, res) => {
    const indexPath = path.join(__dirname, 'index.html');
    res.sendFile(indexPath);
  });

  io.on('connection', async (socket) => {
    socket.on('chat message', async (msg, clientOffset, callback) => {
      let result;
      try {
        const connection = await pool.getConnection();
        result = await connection.execute('INSERT INTO messages (content, client_offset) VALUES (?, ?)', [msg, clientOffset]);
        connection.release();
      } catch (e) {
        console.error(e);
        // Handle the error
        return;
      }
      io.emit('chat message', msg, result[0].insertId);
      callback();
    });

    if (!socket.recovered) {
      try {
        const connection = await pool.getConnection();
        const [rows] = await connection.execute('SELECT id, content FROM messages WHERE id > ?', [socket.handshake.auth.serverOffset || 0]);
        connection.release();

        for (const row of rows) {
          socket.emit('chat message', row.content, row.id);
        }
      } catch (e) {
        console.error(e);
        // Handle the error
      }
    }
  });

  const port = process.env.PORT || 3000;

  server.listen(port, () => {
    console.log(`server running at http://localhost:${port}`);
  });
}
